{"ast":null,"code":"var _jsxFileName = \"/Users/p3rolix/code/FrontEnds/landingsh3ck2.0/src/components/dataSection/interestedUsersForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst InterestedUsersForm = ({\n  handlingSubmitInterestedUser,\n  fullNameError,\n  emailError,\n  cityError,\n  toggleFullNameError,\n  toggleEmailError,\n  toggleCityError // errorFlags,\n  // initializeErrors\n\n}) => {\n  _s();\n\n  // console.log(fullNameError)\n  // console.log(emailError)\n  // console.log(cityError)\n  let array = [];\n  const [interestedUser, setInterestedUser] = useState({\n    fullName: '',\n    email: '',\n    city: ''\n  }); // const [ fullNameError, setFullNameError ] = useState(false)\n  // const [ emailError, setEmailError ] = useState(false)\n  // const [ cityError, setCityError ] = useState(false)\n\n  const handlingInputChange = e => {\n    setInterestedUser({ ...interestedUser,\n      [e.target.name]: e.target.value\n    });\n    console.log(interestedUser);\n  }; // const toggleFullNameError = () => {\n  //     setFullNameError(false)\n  // } \n  // const toggleEmailError = () => {\n  //     setEmailError(false)\n  // } \n  // const toggleCityError = () => {\n  //     setCityError(false)\n  // } \n\n\n  const handlingSubmit = async e => {\n    e.preventDefault();\n    const response = await handlingSubmitInterestedUser(interestedUser);\n    console.log(response);\n\n    if (response === 201) {\n      setInterestedUser({\n        fullName: '',\n        email: '',\n        city: ''\n      });\n    } // console.log(response)\n    // console.log(response)\n    // const responseErrors = response\n    // console.log(responseErrors)\n    // array = responseErrors\n    // console.log(array)\n    // const test = array.map((x) => {\n    //     if (x.message === \"\\\"fullName\\\" is not allowed to be empty\"){\n    //         setFullNameError(true)\n    //     }\n    //     if (x.message === \"\\\"email\\\" is not allowed to be empty\"){\n    //         setEmailError(true)\n    //     }\n    //     if (x.message === \"\\\"city\\\" is not allowed to be empty\"){\n    //         setCityError(true)\n    //     }\n    //     if (x.message === \"\\\"email\\\" must be a valid email\"){\n    //         setEmailError(true)\n    //     }\n    // })\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-1\",\n      onSubmit: e => handlingSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: `${fullNameError ? 'form1InputFullNameError' : 'form1InputFullName'}`,\n        onChange: e => handlingInputChange(e),\n        onFocus: toggleFullNameError // onFocus={initializeErrors}\n        ,\n        type: \"text\",\n        autoComplete: \"off\",\n        name: \"fullName\",\n        placeholder: \"Nombre completo\",\n        required: true,\n        value: interestedUser.fullName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: `${emailError ? 'form1InputEmailError' : 'form1InputEmail'}`,\n        onChange: e => handlingInputChange(e),\n        onFocus: toggleEmailError // onFocus={initializeErrors}\n        ,\n        type: \"text\",\n        autoComplete: \"off\",\n        name: \"email\",\n        placeholder: \"Correo electr\\xF3nico\",\n        required: true,\n        value: interestedUser.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: `${cityError ? 'form1InputCityError' : 'form1InputCity'}`,\n        onChange: e => handlingInputChange(e),\n        onFocus: toggleCityError // onFocus={initializeErrors}\n        ,\n        type: \"text\",\n        autoComplete: \"off\",\n        name: \"city\",\n        placeholder: \"Ciudad\",\n        required: true,\n        value: interestedUser.city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => handlingSubmit(e),\n        type: \"submit\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(InterestedUsersForm, \"jPapBSxC8N0PseNcDZxtNWA+AKU=\");\n\n_c = InterestedUsersForm;\nexport default InterestedUsersForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InterestedUsersForm\");","map":{"version":3,"sources":["/Users/p3rolix/code/FrontEnds/landingsh3ck2.0/src/components/dataSection/interestedUsersForm.js"],"names":["React","useState","InterestedUsersForm","handlingSubmitInterestedUser","fullNameError","emailError","cityError","toggleFullNameError","toggleEmailError","toggleCityError","array","interestedUser","setInterestedUser","fullName","email","city","handlingInputChange","e","target","name","value","console","log","handlingSubmit","preventDefault","response"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react'\n\n\nconst InterestedUsersForm = ({ \n    handlingSubmitInterestedUser,\n    fullNameError,\n    emailError,\n    cityError,\n    toggleFullNameError,\n    toggleEmailError,\n    toggleCityError,\n    // errorFlags,\n    // initializeErrors\n}) => {\n    // console.log(fullNameError)\n    // console.log(emailError)\n    // console.log(cityError)\n    let array = []\n\n    const [ interestedUser , setInterestedUser ] = useState({\n        fullName: '',\n        email: '',\n        city: ''   \n    })\n    // const [ fullNameError, setFullNameError ] = useState(false)\n    // const [ emailError, setEmailError ] = useState(false)\n    // const [ cityError, setCityError ] = useState(false)\n\n    \n    const handlingInputChange = (e) => {\n        setInterestedUser({\n            ...interestedUser, [e.target.name]: e.target.value\n        })\n        console.log(interestedUser)\n    }\n    \n    // const toggleFullNameError = () => {\n    //     setFullNameError(false)\n        \n    // } \n    // const toggleEmailError = () => {\n    //     setEmailError(false)\n        \n        \n    // } \n    // const toggleCityError = () => {\n    //     setCityError(false)\n        \n        \n    // } \n\n\n    const handlingSubmit = async(e) => {\n        e.preventDefault()\n        const response = await handlingSubmitInterestedUser(interestedUser)\n        console.log(response)\n        if (response === 201){\n            setInterestedUser({\n                fullName: '',\n                email: '',\n                city: ''\n            })\n        }\n        // console.log(response)\n        // console.log(response)\n        // const responseErrors = response\n        // console.log(responseErrors)\n        // array = responseErrors\n        // console.log(array)\n        // const test = array.map((x) => {\n        //     if (x.message === \"\\\"fullName\\\" is not allowed to be empty\"){\n        //         setFullNameError(true)\n                \n        //     }\n        //     if (x.message === \"\\\"email\\\" is not allowed to be empty\"){\n        //         setEmailError(true)\n                \n        //     }\n        //     if (x.message === \"\\\"city\\\" is not allowed to be empty\"){\n        //         setCityError(true)\n                \n        //     }\n        //     if (x.message === \"\\\"email\\\" must be a valid email\"){\n        //         setEmailError(true)\n                \n                \n        //     }\n        // })\n        \n    }\n\n    \n    return (\n        <>\n        <form className=\"form-1\"  \n        onSubmit={(e)=> handlingSubmit(e)}\n        >\n            \n            <input\n            className={`${fullNameError ? 'form1InputFullNameError' : 'form1InputFullName'}`}\n            onChange={ (e) => handlingInputChange(e)} \n            onFocus={toggleFullNameError}\n            // onFocus={initializeErrors}\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"fullName\" \n            placeholder=\"Nombre completo\"\n            required\n            value={interestedUser.fullName}\n            />\n            <input\n            className={`${emailError ? 'form1InputEmailError' : 'form1InputEmail'}`}\n            onChange={ (e) => handlingInputChange(e)} \n            onFocus={toggleEmailError}\n            // onFocus={initializeErrors}\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"email\" \n            placeholder=\"Correo electrónico\"\n            required\n            value={interestedUser.email}\n                \n            />\n            <input\n            className={`${cityError ? 'form1InputCityError' : 'form1InputCity'}`}\n            onChange={ (e) => handlingInputChange(e)}\n            onFocus={toggleCityError} \n            // onFocus={initializeErrors}\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"city\" \n            placeholder=\"Ciudad\"\n            required\n            value={interestedUser.city}\n            \n            />\n            <button\n            onClick={(e) => handlingSubmit(e) } \n            type=\"submit\">Enviar</button>  \n        </form>\n        </>\n    )\n}\n\nexport default InterestedUsersForm"]},"metadata":{},"sourceType":"module"}