{"ast":null,"code":"var _jsxFileName = \"/Users/p3rolix/code/FrontEnds/landingsh3ck2.0/src/components/dataSection/interestedUsersForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet array = [];\nlet flagFullNameError = false;\nlet flagEmailError = false;\nlet flagCityError = false;\n\nconst InterestedUsersForm = ({\n  handlingSubmitInterestedUser,\n  // fullNameError,\n  // emailError,\n  // cityError,\n  toggleFullNameError,\n  toggleEmailError,\n  toggleCityError,\n  errorData\n}) => {\n  _s();\n\n  console.log(errorData);\n  const [interestedUser, setInterestedUser] = useState({\n    fullName: '',\n    email: '',\n    city: ''\n  });\n  useEffect(() => {\n    const gettingErrorsMessages = async () => {\n      const test = errorData.map(x => {\n        return console.log(x.message);\n      });\n    };\n\n    gettingErrorsMessages();\n  }, []);\n\n  const handlingInputChange = e => {\n    setInterestedUser({ ...interestedUser,\n      [e.target.name]: e.target.value\n    });\n    console.log(interestedUser);\n  };\n\n  const handlingSubmit = async e => {\n    try {\n      const response = await handlingSubmitInterestedUser(interestedUser);\n      console.log(response.status);\n\n      if (response.status === 201) {\n        setInterestedUser({\n          fullName: '',\n          email: '',\n          city: ''\n        });\n      }\n    } catch (error) {\n      console.log(error); // array = errorData\n      // const test = await array.map((x) => {\n      //      return(\n      //         console.log(x.message)\n      //     )\n      // if (x.message === \"\\\"fullName\\\" is not allowed to be empty\"){\n      //     console.log('pasa por el nuevo fullNameError')\n      //     flagFullNameError = true\n      // }\n      // if (x.message === \"\\\"email\\\" is not allowed to be empty\"){\n      //     console.log('pasa por el nuevo emailError')\n      //     flagEmailError = true\n      // }\n      // if (x.message === \"\\\"city\\\" is not allowed to be empty\"){\n      //     console.log('pasa por el nuevo cityError')\n      //     flagCityError = true\n      // }\n      // if (x.message === \"\\\"email\\\" must be a valid email\"){\n      //     console.log('pasa por emailError 2')\n      //     flagEmailError = true\n      // }\n      // })    \n    } // const response  = await handlingSubmitInterestedUser(interestedUser)\n    // console.log(response)\n    // if (response === 201){\n    //     setInterestedUser({\n    //         fullName: '',\n    //         email: '',\n    //         city: ''\n    //     })\n    // }\n    // array = errorData\n    // const test = array.map((x) => {\n    //     console.log(x.message)\n    //     if (x.message === \"\\\"fullName\\\" is not allowed to be empty\"){\n    //         console.log('pasa por el nuevo fullNameError')\n    //         flagFullNameError = true\n    //     }\n    //     if (x.message === \"\\\"email\\\" is not allowed to be empty\"){\n    //         console.log('pasa por el nuevo emailError')\n    //         flagEmailError = true\n    //     }\n    //     if (x.message === \"\\\"city\\\" is not allowed to be empty\"){\n    //         console.log('pasa por el nuevo cityError')\n    //         flagCityError = true\n    //     }\n    //     if (x.message === \"\\\"email\\\" must be a valid email\"){\n    //         console.log('pasa por emailError 2')\n    //         flagEmailError = true\n    //     }\n    // })\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-1\",\n      onSubmit: e => handlingSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        // className={`${fullNameError ? 'form1InputFullNameError' : 'form1InputFullName'}`}\n        className: `${flagFullNameError ? 'form1InputFullNameError' : 'form1InputFullName'}`,\n        onChange: e => handlingInputChange(e),\n        onFocus: toggleFullNameError,\n        type: \"text\",\n        autoComplete: \"off\",\n        name: \"fullName\",\n        placeholder: \"Nombre completo\",\n        required: true,\n        value: interestedUser.fullName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // className={`${emailError ? 'form1InputEmailError' : 'form1InputEmail'}`}\n        className: `${flagEmailError ? 'form1InputEmailError' : 'form1InputEmail'}`,\n        onChange: e => handlingInputChange(e),\n        onFocus: toggleEmailError,\n        type: \"text\",\n        autoComplete: \"off\",\n        name: \"email\",\n        placeholder: \"Correo electr\\xF3nico\",\n        required: true,\n        value: interestedUser.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // className={`${cityError ? 'form1InputCityError' : 'form1InputCity'}`}\n        className: `${flagCityError ? 'form1InputCityError' : 'form1InputCity'}`,\n        onChange: e => handlingInputChange(e),\n        onFocus: toggleCityError,\n        type: \"text\",\n        autoComplete: \"off\",\n        name: \"city\",\n        placeholder: \"Ciudad\",\n        required: true,\n        value: interestedUser.city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => handlingSubmit(e),\n        type: \"submit\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(InterestedUsersForm, \"MzquxEobXbTdk7ltR/I0kGYlx4A=\");\n\n_c = InterestedUsersForm;\nexport default InterestedUsersForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InterestedUsersForm\");","map":{"version":3,"sources":["/Users/p3rolix/code/FrontEnds/landingsh3ck2.0/src/components/dataSection/interestedUsersForm.js"],"names":["React","useState","useEffect","array","flagFullNameError","flagEmailError","flagCityError","InterestedUsersForm","handlingSubmitInterestedUser","toggleFullNameError","toggleEmailError","toggleCityError","errorData","console","log","interestedUser","setInterestedUser","fullName","email","city","gettingErrorsMessages","test","map","x","message","handlingInputChange","e","target","name","value","handlingSubmit","response","status","error"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from 'react'\nlet array = []\nlet flagFullNameError = false\nlet flagEmailError = false\nlet flagCityError = false\n\nconst InterestedUsersForm = ({ \n    handlingSubmitInterestedUser,\n    // fullNameError,\n    // emailError,\n    // cityError,\n    toggleFullNameError,\n    toggleEmailError,\n    toggleCityError,\n    errorData\n}) => {\n  \n    \n\n    console.log(errorData)\n\n    const [ interestedUser , setInterestedUser ] = useState({\n        fullName: '',\n        email: '',\n        city: ''   \n    })\n    \n    useEffect(() => {\n        const gettingErrorsMessages = async() => {\n            const test = errorData.map( x => {\n                return console.log(x.message)\n            })\n\n        }\n        gettingErrorsMessages()\n        \n    }, [])\n\n    \n    const handlingInputChange = (e) => {\n        setInterestedUser({\n            ...interestedUser, [e.target.name]: e.target.value\n        })\n        console.log(interestedUser)\n    }\n    \n    const handlingSubmit = async(e) => {\n        \n         try {\n            const response  = await handlingSubmitInterestedUser(interestedUser)       \n            console.log(response.status)\n            if (response.status === 201){\n                setInterestedUser({\n                    fullName: '',\n                    email: '',\n                    city: ''\n                })\n            }\n         } catch (error) {\n            console.log(error)\n            // array = errorData\n            // const test = await array.map((x) => {\n            //      return(\n            //         console.log(x.message)\n            //     )\n                \n                // if (x.message === \"\\\"fullName\\\" is not allowed to be empty\"){\n                //     console.log('pasa por el nuevo fullNameError')\n                //     flagFullNameError = true\n                // }\n                // if (x.message === \"\\\"email\\\" is not allowed to be empty\"){\n                //     console.log('pasa por el nuevo emailError')\n                //     flagEmailError = true\n                // }\n                // if (x.message === \"\\\"city\\\" is not allowed to be empty\"){\n                //     console.log('pasa por el nuevo cityError')\n                //     flagCityError = true\n                // }\n                // if (x.message === \"\\\"email\\\" must be a valid email\"){\n                //     console.log('pasa por emailError 2')\n                //     flagEmailError = true\n                // }\n            // })    \n         }\n        \n        \n        // const response  = await handlingSubmitInterestedUser(interestedUser)\n        // console.log(response)\n        // if (response === 201){\n        //     setInterestedUser({\n        //         fullName: '',\n        //         email: '',\n        //         city: ''\n        //     })\n        // }\n        // array = errorData\n        // const test = array.map((x) => {\n        //     console.log(x.message)\n        //     if (x.message === \"\\\"fullName\\\" is not allowed to be empty\"){\n        //         console.log('pasa por el nuevo fullNameError')\n        //         flagFullNameError = true\n        //     }\n        //     if (x.message === \"\\\"email\\\" is not allowed to be empty\"){\n        //         console.log('pasa por el nuevo emailError')\n        //         flagEmailError = true\n        //     }\n        //     if (x.message === \"\\\"city\\\" is not allowed to be empty\"){\n        //         console.log('pasa por el nuevo cityError')\n        //         flagCityError = true\n        //     }\n        //     if (x.message === \"\\\"email\\\" must be a valid email\"){\n        //         console.log('pasa por emailError 2')\n        //         flagEmailError = true\n        //     }\n        // })\n       \n        \n    }\n\n    \n    return (\n        <>\n        <form className=\"form-1\"  \n        onSubmit={(e)=> handlingSubmit(e)}\n        >\n            \n            <input\n            // className={`${fullNameError ? 'form1InputFullNameError' : 'form1InputFullName'}`}\n            className={`${flagFullNameError ? 'form1InputFullNameError' : 'form1InputFullName'}`}\n            onChange={ (e) => handlingInputChange(e)} \n            onFocus={toggleFullNameError}\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"fullName\" \n            placeholder=\"Nombre completo\"\n            required\n            value={interestedUser.fullName}\n            />\n            <input\n            // className={`${emailError ? 'form1InputEmailError' : 'form1InputEmail'}`}\n            className={`${flagEmailError ? 'form1InputEmailError' : 'form1InputEmail'}`}\n            onChange={ (e) => handlingInputChange(e)} \n            onFocus={toggleEmailError}\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"email\" \n            placeholder=\"Correo electrónico\"\n            required\n            value={interestedUser.email}\n                \n            />\n            <input\n            // className={`${cityError ? 'form1InputCityError' : 'form1InputCity'}`}\n            className={`${flagCityError ? 'form1InputCityError' : 'form1InputCity'}`}\n            onChange={ (e) => handlingInputChange(e)} \n            onFocus={toggleCityError}\n            type=\"text\"\n            autoComplete=\"off\"\n            name=\"city\" \n            placeholder=\"Ciudad\"\n            required\n            value={interestedUser.city}\n            \n            />\n            <button\n            onClick={(e) => handlingSubmit(e) } \n            type=\"submit\">Enviar</button>  \n        </form>\n        </>\n    )\n}\n\nexport default InterestedUsersForm"]},"metadata":{},"sourceType":"module"}